'use strict'
/*
*1 задание:
*Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту. 
*Подсказка: расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту, Tc – температура по Цельсию
*/
let Tc = 33;
let Tf = (9 / 5)* Tc + 32;
alert(Tf);

/*
*2 задание:
*Работа с переменными. Объявить две переменные: admin и name. Записать в name строку "Василий"; 
*Скопировать значение из name в admin. Вывести admin (должно вывести «Василий»)
*/   
let name;
let admin;
name = 'Василий';
admin = name;
console.log(admin);

/*
*3 задание:
*Чему будет равно JS-выражение 1000 + "108" 
*/
let answer = 1000 + '108';
console.log(answer);
// так как складывается число со строкой , то итогом будет строка '1000108'.

/*
*4 Задание:
*Самостоятельно разобраться с атрибутами тега script (async и defer)
*/

/*
* defer
* Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.
* Скрипты с defer никогда не блокируют страницу.
* Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
* Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
* Поэтому, если сначала загружается большой скрипт, а затем меньшего размера, то последний будет ждать.
* Атрибут defer предназначен только для внешних скриптов
* Атрибут defer будет проигнорирован, если в теге <script> нет src.
*
* async
* Атрибут async означает, что скрипт абсолютно независим:
* Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
* Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
* DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова), 
* так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
* Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.
* Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. 
* То, что первое загрузится – запустится в первую очередь:
* Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д. 
* Они не зависят от наших скриптов, и мы тоже не должны ждать их:
*/